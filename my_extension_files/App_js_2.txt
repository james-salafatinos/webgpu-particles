nst softening = float(0.05); // Avoid singularities at very small distances
  const dampening = uniform(0.1); // Adjust this to control the strength of dampening

  const material = new THREE.SpriteNodeMaterial({
    transparent: true,
    blending: THREE.AdditiveBlending,
    depthWrite: false,
  });

  const positionBuffer = instancedArray(count, "vec3");
  const velocityBuffer = instancedArray(count, "vec3");

  const sphericalToVec3 = Fn(([phi, theta]) => {
    const sinPhiRadius = sin(phi);

    return vec3(
      sinPhiRadius.mul(sin(theta)),
      cos(phi),
      sinPhiRadius.mul(cos(theta))
    );
  });

  console.log("###1.", positionBuffer);

  const create_WebGPU = Fn(() => {
    const position = positionBuffer.element(instanceIndex);
    const velocity = velocityBuffer.element(instanceIndex);

    const basePosition = vec3(
      hash(instanceIndex.add(uint(Math.random() * 0xffffff))),
      hash(instanceIndex.add(uint(Math.random() * 0xffffff))),
      hash(instanceIndex.add(uint(Math.random() * 0xffffff)))
    )
      .sub(0.5)
      .mul(vec3(5, 2, 5));
    position.assign(basePosition);

    const phi = hash(instanceIndex.add(uint(Math.random() * 0xffffff)))
      .mul(PI)
      .mul(2);
    const theta = hash(instanceIndex.add(uint(Math.random() * 0xffffff))).mul(
      PI
    );
    const baseVelocity = sphericalToVec3(phi, theta).mul(0.05);
    velocity.assign(baseVelocity);
  });

  createCompute = create_WebGPU().compute(count);
  console.log("###2.", createCompute);

  const reset = () => {
    renderer.computeAsync(createCompute);
  };

  reset();

  const update_WebGPU = Fn(() => {
    const delta = float(1 / 60)
      .mul(timeScale)
      .toVar(); // uses fixed delta to consistant result

    const position = positionBuffer.element(instanceIndex);
    const velocity = velocityBuffer.element(instanceIndex);

    // force

    const force = vec3(0).toVar();

    const idxVar